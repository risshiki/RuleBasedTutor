import("types.nools");

// If the argument is an integer, return it without the ones digit, else return null
//
function removeOnesDigit(n) {
    return (Number.isInteger(n) ? Math.floor(n/10) : null);
}

// Return true if the 2 arguments are not equal.
//
function notEqual(m, n) {
    return m != n;
}

function append_25(n)
{
    return parseInt(n.toString()+"25");
}


// RULE bootstrap
// Always fired at startup for initialization of working memory
//
rule bootstrap {
    when {
        s: Boolean s === false from false;
    }
    then {
        console.log("bootstrap", numberToSquare);

        // create facts to represent the student interface components
        let given = assert(new InterfaceElement("givenNum"));
        let firstPart = assert(new InterfaceElement("firstPart"));
        let firstPartPlus1 = assert(new InterfaceElement("firstPartPlusOne"));
        let product = assert(new InterfaceElement("product"));
        let append25 = assert(new InterfaceElement("append25"));
        let finalAnswer = assert(new InterfaceElement("finalAnswer"));

        // create the main Problem fact, with the given numberToSquare and the component names
        assert(new Problem("square"+numberToSquare, numberToSquare,
            firstPart.name,
            firstPartPlus1.name,
            product.name,
            append25.name,
            finalAnswer.name));

        // write the numberToSquare to the proper student interface component
        assert(new TPA(given.name, "UpdateTextField", numberToSquare));

        setProblemAttribute("use_backtracking", true);
        halt();
    }
}

// RULE findFirstPart
// IF
//   there is a Problem with givenNumber n that ends in 5
//   and whose firstPart is empty  (i.e., we have not yet found the first part)
// THEN
//   compute f by removing the ones digit from n
//   write f as the firstPart

rule findFirstPart {
    when {
        prob : Problem prob.firstPart == null && (prob.givenNumber % 10) == 5
            {givenNumber: n, ieFirstPart: sel};
        ie : InterfaceElement ie.name == sel && ie.value == null;
    }
    then {
            // compute the number with the 5 on the right "chopped off"
        let f = removeOnesDigit(n);
            // hints
        assert(new Hint("Start by removing the right-most digit from "+n+"."));
        assert(new Hint("If you remove the right-most digit from "+n+", you have "+f+"."));
        assert(new Hint("Please write "+f+"."));
            // model observable action
	      if (checkSAI({selection: sel, action: "UpdateTextField", input: f})) {
            setSuccessOrBugMsg("Correct! ");
             modify(prob, "firstPart", f);    // modify semantic representation
	           modify(ie, "value", f);         // modify interface represention in WM
                                            //(this does not change the interface itself!!)
	           halt();                 // await next student action
        }
        else {
            backtrack();             // undo any changes and search further
	     }
    }
}

// RULE addOne
// IF
//    there is a goal to determine the square of a number
//    and we have split off the first part (call it f)
//    and we have not added 1 to the first part
//THEN
//    Write (f + 1) as the first part plus 1

rule addOne {
  when {
    p : Problem p.firstPart != null && p.firstPartPlus1 == null
	      {firstPart: f, ieFirstPartPlus1: sel};
    ie : InterfaceElement ie.name==sel && ie.value==null;    
  }
  then {
            // do the actual adding of 1
    let f1 = f + 1;
            // hints
    assert(new Hint("Next step: Add 1."));
    assert(new Hint("If you add 1 to the previous number, "+f+", you have "+f1+"."));
    assert(new Hint("Please write "+f1+"."));
            // model observable action
    if(checkSAI({selection: sel, action: "UpdateTextField", input: f1})) {
        setSuccessOrBugMsg("Correct! ");
        modify(p, "firstPartPlus1", f1);       // modify semantic representation
        modify(ie, "value", f1);              // modify interface represention in WM
                                            //(this does not change the interface itself!!)
        halt();                 // await next student action
    }
    else {
	     backtrack();             // undo any changes and search further
	 }
  }
}




rule create_product {
    
    when {
    p : Problem p.firstPart != null && p.firstPartPlus1 != null && p.product == null
          {firstPart : fp, firstPartPlus1 : fp1, ieProduct: sel};
    ie : InterfaceElement ie.name==sel && ie.value==null;    
         }


  then {
            
    let pro = fp * fp1;
            // hints
    assert(new Hint("Next step: Take the product of the first part and it's +1 component"));
    //assert(new Hint("If you multiply, "+fp+" to "+fp1+",  you get "+pro+"."));
    //assert(new Hint("Please write "+pro+"."));
            // model observable action
    if(checkSAI({selection: sel, action: "UpdateTextField", input: pro})) {
        setSuccessOrBugMsg("Correct! ");
        modify(p, "product", pro);       // modify semantic representation
        modify(ie, "value", pro);              // modify interface represention in WM
                                            //(this does not change the interface itself!!)
        halt();                 // await next student action
    }
    else {
         backtrack();             // undo any changes and search further
     }
  }

}



rule Bug_Product_Of_Second_Number_and_5 {
 when {
    p : Problem p.firstPart != null && p.firstPartPlus1 != null && p.product == null
          {firstPartPlus1 : fp1, ieProduct: sel};
    ie : InterfaceElement ie.name==sel && ie.value==null; 
      }

 then {
     let incorrect_product = fp1*5;

     if (checkSAI({selection: sel, action: "UpdateTextField", input: incorrect_product}, null , true)) {
         setSuccessOrBugMsg("Take the product of first part and it's increment! ");
         backtrack();
     }
     
 }
}

rule append_25 {
    
    when {
    p : Problem p.product != null && p.append25 == null
          {product : pro, ieAppend25: sel};
    ie : InterfaceElement ie.name==sel && ie.value==null;    
         }

         
  then {
            // do the actual adding of 1 
    
    let f_answer = append_25(pro);
            // hints
    assert(new Hint("Next step: Append 25 to your product"));
    assert(new Hint("Add 25 to "+f_answer+" ."));
    assert(new Hint("Please write "+f_answer+"."));
            // model observable action
    if(checkSAI({selection: sel, action: "UpdateTextField", input: f_answer})) {
        setSuccessOrBugMsg("Correct! ");
        modify(p, "append25", f_answer);       // modify semantic representation
        modify(ie, "value", f_answer);              // modify interface represention in WM
                                            //(this does not change the interface itself!!)
        halt();                 // await next student action
    }
    else {
         backtrack();             // undo any changes and search further
     }
  }

}



rule final_Answer {
    
    when {
    p : Problem p.firstPart != null && p.firstPartPlus1 != null && p.product != null && p.append25 != null && p.finalAnswer == null
          {append25 : lastappend, ieFinalAnswer: sel};
    ie : InterfaceElement ie.name==sel && ie.value==null;    
         }

         
  then {
            // do the actual adding of 1 
    
    let f_answer = lastappend;
            // hints
    assert(new Hint("Copy the previous element here"));
    
            // model observable action
    if(checkSAI({selection: sel, action: "UpdateTextField", input: f_answer})) {
        setSuccessOrBugMsg("Correct! ");
        modify(p, "finalAnswer", f_answer);       // modify semantic representation
        modify(ie, "value", f_answer);              // modify interface represention in WM
                                            //(this does not change the interface itself!!)
        halt();                 // await next student action
    }
    else {
         backtrack();             // undo any changes and search further
     }
  }

}



rule Done {
    when {
     p : Problem p.firstPart != null && p.firstPartPlus1 != null && p.product != null && p.append25 != null && p.finalAnswer != null;   
        }

    then {
        if (checkSAI({selection: "done", action: "ButtonPressed", input: "completeSequence"})) {
            setSuccessOrBugMsg("Done! ");
            //modify(p, "done", true);
            halt();
        }
    }
}
